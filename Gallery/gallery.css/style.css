* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}




html {
    font-size: 62.5%;
}






body {
    background-color: #999999;
    font-family: sans-serif;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 2em;


}





h1 {
    text-transform: uppercase;
    font-size: 3rem;

}




img {
    max-width: 100%;
    /* Define as imagens se redimensionarão para não ultrapassar a largura do seu contêiner pai */


}





.gallery {
    width: 74rem;
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    background-color: white;
    gap: .5em;
    padding: .75em;
    box-shadow: 0 0 10px 6px rgba(0, 0, 0, .3);


}







.gallery .image {
    flex-basis: calc(25% - .5em);
    /* Essa configuração define em subtrair o valor de 25% pelo .5em em gap que foi aplicado na class gallery */
    position: relative;
    overflow: hidden;
    /* overflow: hidden;: Garante que qualquer conteúdo que exceda os limites do contêiner (como uma imagem que é muito grande) seja cortado e não apareça fora dos limites do item. Isso é especialmente útil para manter um layout limpo e organizado, especialmente em galerias de imagens. */


}





.gallery p {
    background-color: rgba(0, 0, 0, .8);
    padding: 1.3em;
    color: white;
    text-transform: uppercase;
    letter-spacing: 1px;
    position: absolute;
    bottom: 0;
    width: 100%;
    border-radius: 3px;
    font-size: .80em;
    text-align: center;
    transform: translateY(100%);
    /*  Inicialmente move o parágrafo para fora da vista (abaixo do seu container), provavelmente para uma animação. */
    transition: all .5s;
}





.image:hover p {
    transform: translateY(0);
    /* translateY(0) move o elemento para a sua posição original na direção vertical (Y). Isso geralmente é usado em conjunto com outras transformações, como translateY(-20px) ou algo semelhante, para criar um efeito de animação suave. Nesse caso, ao passar o mouse, o parágrafo se moveria para sua posição original. */


}




.image img {
    transform: scale(1);
    /* transform: scale(1);: Isso define a escala inicial das imagens como 1, ou seja, elas são exibidas em seu tamanho original. Você pode usar essa propriedade para aumentar ou diminuir o tamanho das imagens quando necessário, por exemplo, ao passar o mouse sobre elas. */
    transition: all .5s;
    /* transition: all .5s;: Isso adiciona uma transição suave para todas as propriedades que mudam. No caso de um efeito de hover, por exemplo, se você aumentar a escala da imagem para algo como scale(1.1), a imagem irá aumentar suavemente em um período de 0.5 segundos. */
}




.image:hover img {
    transform: scale(1.5);
    /* image:hover img { transform: scale(1.5); }, tem a função de aplicar um efeito de aumento à imagem quando o usuário passa o mouse sobre o elemento com a classe .image. */

    /* transform: scale(1.5);: Esse estilo aplica uma transformação que aumenta a escala da imagem em 150% (1.5 vezes seu tamanho original). */

}




.image::after {
    content: "";
    position: absolute;
    background-color: white;
    inset: 0;
    /* inset: 0;: É uma shorthand para definir as margens (topo, direita, fundo e esquerda) do pseudo-elemento como 0, fazendo com que ele preencha todo o espaço do elemento pai. */
    opacity: .5;
    /* opacity: .5;: Define a opacidade do pseudo-elemento em 50%, permitindo que o conteúdo abaixo (o elemento original) ainda seja visível, mas com uma leve tonalidade branca. */
    pointer-events: none;
    /* A propriedade CSS pointer-events permite autores controlarem sob qualquer circustancia(se houver) um elemento gráfico particular podendo ser o alvo do evento do mouse, nesse caso aqui ele habilitou (cursor ponte ) */
    transition: opacity all .5s;

}





.image:hover::after {
    opacity: 0;
}









.gallery a {
    text-decoration: none;
}